
#from aiogram.utils import executor
from datetime import datetime
import sqlite3
import sys
#import pandas as pd
import json

pydub_path = ''
sys.path.append(pydub_path)
TG_BOT_TOKEN = '—Ç–æ–∫–µ–Ω —Ç–µ–ª–µ–≥—Ä–∞–º –±–æ—Ç–∞'
import os
from aiogram import Bot, Dispatcher, executor, types
from aiogram.types import  ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton

class dataBase():
    def __init__(self):
        self.list_users = {} #self.init_db('filename.db')

class TGBot:
    def __init__(self):
        db = dataBase()
        #self.users_id = db.list_users
        self.users_id = self.loadJSON()
        self.section_type = 'head'
        if self.users_id == {}:
            userid = 'default'
            self.users_id = {userid:{'nickname':'','in_case':0,'out_case':0,'out_adres':''}}
            self.saveJSON(self.users_id)

        bot = Bot(token=TG_BOT_TOKEN)
        dp = Dispatcher(bot)
        self.dp = dp
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
        @dp.message_handler(commands=['start'])
        async def process_start_command(message: types.Message):
            answer = '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é \n –º–æ–π —Ç–µ–ª–µ–≥—Ä–∞–º –¥–ª—è —Å–≤—è–∑–∏: @txeon \n  –º–æ–π —Ç–µ–ª–µ—Ñ–æ–Ω: +79034349459'

            await message.reply(answer, reply_markup=self.head_menu())

        #--------------------------- –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ---------------------------------------
        @dp.message_handler(lambda message: message.text in ['üîÇ –í–µ—Ä–Ω—É—Ç—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é','üîÇ –û—á–∏—Å—Ç–∏—Ç—å –∏ –≤–µ—Ä–Ω—É—Ç—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'])
        async def process_level1_buttons(message: types.Message):
            if self.section_type == 'new_user':
                userid = str(message.from_user.id)
                self.users_id.pop(userid)

            await message.reply("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=self.head_menu())

        #--------------------------- –ü–æ–ø–æ–ª–∏—Ç—å –¥–µ–ø–æ–∑–∏—Ç ---------------------------------------
        @dp.message_handler(lambda message: message.text in ['üí∞ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –¥–µ–ø–æ–∑–∏—Ç'])
        async def process_level1_buttons(message: types.Message):
            # –°–æ–∑–¥–∞–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ –¥–ª—è –≤—Ç–æ—Ä–æ–≥–æ —É—Ä–æ–≤–Ω—è –¥–µ—Ä–µ–≤–∞
            button8 = KeyboardButton('üë®‚Äçüíº –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å')
            button9 = KeyboardButton('ü§µ –ò–Ω–≤–µ—Å—Ç–æ—Ä')
            markup_level2 = ReplyKeyboardMarkup(resize_keyboard=True).add(button8, button9)
            await message.reply("–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç –≤—Ö–æ–¥–∞:", reply_markup=markup_level2)

        #---------------------------- –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ------------------------------------
        @dp.message_handler(lambda message: message.text in ['üë®‚Äçüíº –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å','üë®‚Äçüíº –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è'])
        async def process_level1_buttons(message: types.Message):
            button8 = KeyboardButton('üë®‚Äçüíº –î–∞')
            button9 = KeyboardButton('üë®‚Äçüíº –ù–µ—Ç')
            markup_level2 = ReplyKeyboardMarkup(resize_keyboard=True).add(button8, button9)
            await message.reply("–û–∑–Ω–∞–∫–æ–º–∏–ª–∏—Å—å –ª–∏ –í—ã —Å –ø—Ä–∞–≤–∏–ª–∞–º–∏?", reply_markup=markup_level2)

        #------------------------------------- –î–∞ --------------------------------------------
        @dp.message_handler(lambda message: message.text in ['üë®‚Äçüíº –î–∞'])
        async def process_level1_buttons(message: types.Message):
            button9 = KeyboardButton('üîÇ –í–µ—Ä–Ω—É—Ç—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
            markup_return = ReplyKeyboardMarkup(resize_keyboard=True).add(button9)
            self.section_type = 'nickname'
            await message.reply("–£–∫–∞–∂–∏—Ç–µ nickname —Ç–µ–ª–µ–≥—Ä–∞–º –∞–∫–∫–∞—É–Ω—Ç–∞ –∏ –Ω–∞–∂–º–∏—Ç–µ –≤–≤–æ–¥.", reply_markup=markup_return)

        #------------------------------------- –ù–µ—Ç --------------------------------------------
        @dp.message_handler(lambda message: message.text in ['üë®‚Äçüíº –ù–µ—Ç'])
        async def process_level1_buttons(message: types.Message):
            button1 = KeyboardButton('üìã –ü—Ä–∞–≤–∏–ª–∞')
            button0 = KeyboardButton('üîÇ –í–µ—Ä–Ω—É—Ç—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
            markup_lev = ReplyKeyboardMarkup(resize_keyboard=True).add(button1,button0)
            await message.reply("–ü—Ä–æ—á–∏—Ç–∞—Ç—å –ø—Ä–∞–≤–∏–ª–∞", reply_markup=markup_lev)

        #------------------------------------- –ü—Ä–∞–≤–∏–ª–∞ --------------------------------------------
        @dp.message_handler(lambda message: message.text in ['üìã –ü—Ä–∞–≤–∏–ª–∞'])
        async def process_level1_buttons(message: types.Message):
            button0 = KeyboardButton('üîÇ –í–µ—Ä–Ω—É—Ç—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
            markup_lev = ReplyKeyboardMarkup(resize_keyboard=True).add(button0)
            rules = self.loadFile('rules.txt')
            await message.reply(rules, reply_markup=markup_lev)

#====================================================================================================================
        #====================================== –ò–Ω–≤–µ—Å—Ç–æ—Ä =========================================
        @dp.message_handler(lambda message: message.text in ['üí∞ –ü–µ—Ä–µ–π—Ç–∏ –∫ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—é','üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞','ü§µ –ò–Ω–≤–µ—Å—Ç–æ—Ä'])
        async def process_level1_buttons(message: types.Message):
            self.section_type = 'investor_id'
            button1 = KeyboardButton('üÜî –í–æ–π—Ç–∏ –ø–æ —Ç–µ–∫—É—â–µ–º—É id')
            button0 = KeyboardButton('üîÇ –í–µ—Ä–Ω—É—Ç—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
            markup_lev = ReplyKeyboardMarkup(resize_keyboard=True).add(button1,button0)
            user_id = message.from_user.id
            await message.reply(f'–≤–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä, \n–∏–ª–∏ –≤–æ–π–¥–∏—Ç–µ –ø–æ —Ç–µ–∫—É—â–µ–º—É id: {user_id}', reply_markup=markup_lev)

        @dp.message_handler(lambda message: message.text in ['üíπ –ü–æ–ª—É—á–∏—Ç—å –æ—Ç—á–µ—Ç –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ü–∏–∫–ª'])
        async def process_level2_buttons(message: types.Message):
            button0 = KeyboardButton('üîÇ –í–µ—Ä–Ω—É—Ç—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
            markup_return = ReplyKeyboardMarkup(resize_keyboard=True).add(button0)
            await message.reply("–æ—Ç—á–µ—Ç", reply_markup=markup_return)

        #======================================== –í—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤ =========================================
        @dp.message_handler(lambda message: message.text in ['üíµ –í—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤','üíµ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞'])
        async def process_level1_buttons(message: types.Message):
            self.section_type = 'out_case'
            button8 = KeyboardButton('üíµ –í–æ–π—Ç–∏ –ø–æ–¥ —Ç–µ–∫—É—â–∏–º ID')
            button9 = KeyboardButton('üîÇ –í–µ—Ä–Ω—É—Ç—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
            markup_level2 = ReplyKeyboardMarkup(resize_keyboard=True).add(button8,button9)
            user_id = message.from_user.id
            await message.reply(f'–≤–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä, \n–∏–ª–∏ –≤–æ–π–¥–∏—Ç–µ –ø–æ —Ç–µ–∫—É—â–µ–º—É id: {user_id}', reply_markup=markup_level2)

        @dp.message_handler(lambda message: message.text in ['üíµ –í–æ–π—Ç–∏ –ø–æ–¥ —Ç–µ–∫—É—â–∏–º ID'])
        async def process_level3_buttons(message: types.Message):
            self.section_type = 'out_case'
            await self.outCase(message)

        #------------------------------------- ALL --------------------------------------------

        @dp.message_handler()
        async def all_callback(message: types.Message):
            userid = str(message.from_user.id)
            if self.section_type == 'nickname':
                if message.text != '':
                    self.registration(message)
                    button1 = KeyboardButton('üí∞ –ü–µ—Ä–µ–π—Ç–∏ –∫ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—é')
                    button0 = KeyboardButton('üîÇ –û—á–∏—Å—Ç–∏—Ç—å –∏ –≤–µ—Ä–Ω—É—Ç—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
                    markup_return = ReplyKeyboardMarkup(resize_keyboard=True).add(button1, button0)
                    await message.reply(f"{self.users_id[userid]['nickname']}, –í–∞–º –ø—Ä–∏—Å–≤–æ–µ–Ω –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä: "
                                        f"{message.from_user.id}", reply_markup=markup_return)

            await self.inCase(message)
            await self.outCase(message)

        #================================================


    async def inCase(self, message):

        if self.section_type == 'investor_in_case':
            if self.access_check(message):
                if self.request_case_add(message):
                    button0 = KeyboardButton('üîÇ –í–µ—Ä–Ω—É—Ç—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
                    markup_return = ReplyKeyboardMarkup(resize_keyboard=True).add(button0)
                    dtm = self.timeNew()
                    await message.reply(f"–°–ø–∞—Å–∏–±–æ, –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞. {dtm} \n "
                                        f"–í–∞—â –±–∞–ª–∞–Ω—Å –±—É–¥–µ—Ç –ø–æ–ø–æ–ª–Ω–µ–Ω —Å–æ–≥–ª–∞—Å–Ω–æ –ø—Ä–∞–≤–∏–ª–∞–º",reply_markup=markup_return)
                else:
                    button2 = KeyboardButton('üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞')
                    button0 = KeyboardButton('üîÇ –í–µ—Ä–Ω—É—Ç—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
                    markup_return = ReplyKeyboardMarkup(resize_keyboard=True).add(button2, button0)
                    await message.reply("–í–Ω–∏–º–∞–Ω–∏–µ!\n –ó–∞—è–≤–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ, –Ω–µ–º–Ω–æ–≥–æ –ø–æ–∑–∂–µ",
                                        reply_markup=markup_return)

        if self.section_type == 'investor_id':
            if message.text != '':
                if self.access_check(message):
                    button2 = KeyboardButton('üîÇ –í–µ—Ä–Ω—É—Ç—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
                    markup_return = ReplyKeyboardMarkup(resize_keyboard=True).add(button2)
                    self.section_type = 'investor_in_case'
                    await message.reply("–£–∫–∞–∂–∏—Ç–µ —Ç–æ—á–Ω—É—é —Å—É–º–º—É –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –∏ –Ω–∞–∂–º–∏—Ç–µ ‚ñ∂", reply_markup=markup_return)
                else:
                    button2 = KeyboardButton('üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞')
                    button1 = KeyboardButton('üë®‚Äçüíº –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è')
                    button0 = KeyboardButton('üîÇ –í–µ—Ä–Ω—É—Ç—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
                    markup_return = ReplyKeyboardMarkup(resize_keyboard=True).add(button2, button1, button0)
                    await message.reply("–£–∫–∞–∑–∞–Ω–Ω—ã–π –Ω–æ–º–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω", reply_markup=markup_return)



    async def outCase(self, message):
        print('SECT:',self.section_type,'MESSAGE:',message.text)
        if self.section_type == 'investor_out_adres':
            if message.text != '':
                if self.access_check(message):
                    button0 = KeyboardButton('üîÇ –í–µ—Ä–Ω—É—Ç—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
                    markup_return = ReplyKeyboardMarkup(resize_keyboard=True).add(button0)
                    dtm = self.timeNew()
                    if self.request_case_out(message, dtm):
                        await message.reply(f"–°–ø–∞—Å–∏–±–æ, –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞. {dtm} \n "
                                            f"–í–∞—â–∏ —Å—Ä–µ–¥—Å—Ç–≤–∞ –±—É–¥—É—Ç –≤—ã–≤–µ–¥–µ–Ω—ã —Å–æ–≥–ª–∞—Å–Ω–æ –ø—Ä–∞–≤–∏–ª–∞–º",
                                            reply_markup=markup_return)
                    else:
                        await message.reply("–í–Ω–∏–º–∞–Ω–∏–µ!, –∑–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞", reply_markup=markup_return)

        if self.section_type == 'investor_out_case':
            if message.text != '':
                if self.access_check(message):
                    button0 = KeyboardButton('üîÇ –í–µ—Ä–Ω—É—Ç—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
                    markup_return = ReplyKeyboardMarkup(resize_keyboard=True).add(button0)
                    self.section_type = 'investor_out_adres'
                    await message.reply("–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –¥–ª—è –≤—ã–≤–æ–¥–∞ —Å—Ä–µ–¥—Å—Ç–≤ –∏ –Ω–∞–∂–º–∏—Ç–µ ‚ñ∂, \n "
                                        "–í–Ω–∏–º–∞–Ω–∏–µ! –≤—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—Å—è —Ç–æ–ª—å–∫–æ –Ω–∞ –∞–¥—Ä–µ—Å–∞ —Å–µ—Ç–∏ BEP20",
                                        reply_markup=markup_return)

        if self.section_type == 'out_case':
            if self.access_check(message):
                button2 = KeyboardButton('üîÇ –í–µ—Ä–Ω—É—Ç—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
                markup_return = ReplyKeyboardMarkup(resize_keyboard=True).add(button2)
                self.section_type = 'investor_out_case'
                await message.reply("–£–∫–∞–∂–∏—Ç–µ —Ç–æ—á–Ω—É—é —Å—É–º–º—É –≤—ã–≤–æ–¥–∏–º—ã—Ö —Å—Ä–µ–¥—Å—Ç–≤ –∏ –Ω–∞–∂–º–∏—Ç–µ ‚ñ∂", reply_markup=markup_return)
            else:
                button2 = KeyboardButton('üíµ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞')
                button0 = KeyboardButton('üîÇ –í–µ—Ä–Ω—É—Ç—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
                markup_return = ReplyKeyboardMarkup(resize_keyboard=True).add(button2, button0)
                await message.reply("–£–∫–∞–∑–∞–Ω–Ω—ã–π –Ω–æ–º–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω", reply_markup=markup_return)

    def head_menu(self):
        markup = ReplyKeyboardMarkup(resize_keyboard=True)
        button1 = KeyboardButton('üí∞ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –¥–µ–ø–æ–∑–∏—Ç')
        button2 = KeyboardButton('üíµ –í—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤')
        button3 = KeyboardButton('üìã –ü—Ä–∞–≤–∏–ª–∞')
        button4 = KeyboardButton('üíπ –ü–æ–ª—É—á–∏—Ç—å –æ—Ç—á–µ—Ç –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ü–∏–∫–ª')
        markup.add(button1, button2, button3, button4)
        return markup

    #-----------------------------------------------------------------------------------------------------
    def access_check(self, message):
        res = False
        userid = str(message.from_user.id)
        if userid in self.users_id:
            res = True
        return res

    def loadFile(self, filename):
        print('rules0',filename)
        if os.path.exists(filename):
            res = ''
            print('rules1')
            with open(filename, 'r', encoding='utf8') as file:
                line = file.readlines()
                for _str in line:
                    res = res + _str + "\n"
            return res
        else:
            return 'no file: '+filename

    def loadJSON(self):
        data = {}
        if os.path.exists('users.json'):
            with open('users.json', 'r') as file:
                data = json.load(file)
        print('JSON',data)
        return data

    def saveJSON(self, data):
        with open('users.json', 'w') as file:
            json.dump(data, file)


    def registration(self,message):
        userid = str(message.from_user.id)
        if userid in self.users_id:
            self.users_id[userid]['nickname'] = message.text
        else:
            self.users_id.update({userid:{'nickname':message.text,'in_case':0,'out_case':0,'out_adres':''}})
        self.saveJSON(self.users_id)

    def request_case_add(self,message):
        userid = str(message.from_user.id)
        self.users_id[userid]['in_case'] = message.text
        print(F'–ü–†–ò–®–ï–õ –ó–ê–ü–†–û–° –û–¢ {userid} –ù–ê –î–û–ë–ê–í–õ–ï–ù–ò–ï –°–†–ï–î–°–¢–í')
        res = self.sendMessage(message)

        return res

    def request_case_out(self, message, dtm):
        userid = str(message.from_user.id)
        self.users_id[userid]['in_adres'] = message.text
        print(F'–ü–†–ò–®–ï–õ –ó–ê–ü–†–û–° –û–¢ {userid} –ù–ê –í–´–í–û–î –°–†–ï–î–°–¢–í')
        res = self.sendMessage(message)
        return res

    def sendMessage(self,message):
        userid = str(message.from_user.id)
        tm = self.timeNew()
        snd_message = {userid: self.users_id[userid],'time':tm}
        return True

    def timeNew(self):
        """–ª–æ–∫–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –∫–æ–º–ø—å—é—Ç–µ—Ä–∞"""
        return datetime.now().strftime("%d-%m-%Y %H:%M:%S")

if __name__ == '__main__':
    tgbot = TGBot()
    executor.start_polling(tgbot.dp, skip_updates=True)
